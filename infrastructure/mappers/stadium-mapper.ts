import type { Stadium } from "@/domain/entities/stadium";
import type { StadiumDTO } from "@/infrastructure/http/dtos/stadium-dto";

/**
 * Stadium Mapper
 * Transforms data between DTO (API format) and Domain Entity (business format)
 *
 * Responsibilities:
 * - Convert snake_case to camelCase (if needed)
 * - Parse dates from strings to Date objects
 * - Handle null/undefined values
 * - Transform API structure to domain structure
 */
export class StadiumMapper {
  /**
   * Transform DTO to Domain Entity
   * Converts API response format to domain model
   *
   * @param dto - Stadium data from API
   * @returns Domain Stadium entity
   */
  static toDomain(dto: StadiumDTO): Stadium {
    return {
      id: dto.id,
      code: dto.code,
      name: dto.name,
      city: dto.city,
      country: dto.country,
      timezone: dto.timezone,
      capacity: dto.capacity,
      createdAt: new Date(dto.createdAt),
      updatedAt: new Date(dto.updatedAt),
    };
  }

  /**
   * Transform array of DTOs to Domain Entities
   *
   * @param dtos - Array of stadium DTOs
   * @returns Array of domain Stadium entities
   */
  static toDomainList(dtos: StadiumDTO[]): Stadium[] {
    return dtos.map((dto) => this.toDomain(dto));
  }

  /**
   * Transform Domain Entity to DTO
   * Converts domain model to API request format
   * (Useful for POST/PUT requests)
   *
   * @param domain - Domain Stadium entity
   * @returns Stadium DTO for API
   */
  static toDTO(domain: Stadium): StadiumDTO {
    return {
      id: domain.id,
      code: domain.code,
      name: domain.name,
      city: domain.city,
      country: domain.country,
      timezone: domain.timezone,
      capacity: domain.capacity,
      createdAt: domain.createdAt.toISOString(),
      updatedAt: domain.updatedAt.toISOString(),
    };
  }

  /**
   * Transform Domain Entity to DTO for creation
   * Omits fields that are generated by the backend (id, createdAt, updatedAt)
   *
   * @param domain - Domain Stadium entity without id
   * @returns Stadium DTO for creation
   */
  static toCreateDTO(
    domain: Omit<Stadium, 'id' | 'createdAt' | 'updatedAt'>
  ): Omit<StadiumDTO, 'id' | 'createdAt' | 'updatedAt'> {
    return {
      code: domain.code,
      name: domain.name,
      city: domain.city,
      country: domain.country,
      timezone: domain.timezone,
      capacity: domain.capacity,
    };
  }
}
